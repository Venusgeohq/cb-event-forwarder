##########
#General Config Options
##########

## Be careful the YAML is being used here
# - is shorthand for array notation
# whitespace can be used or you can breakout into JSON notation but the strings will need to be double-qouted

input: 
    cbresponse:
        cb_server_url: https://cbresponseserver
        #optional rabbit mq options - if none are specified, /etc/cb//cb.conf
        #will be used
        #rabbit_mq_username: cb
        #rabbit_mq_hostname: localhost
        #rabbit_mq_password:
        #bind_raw_exchange: true ( defaults to false )
        # optional tls for MQ
        # if ommited no tls will be used
        #tls stanza defines optional tls parameters for ampqs
        #tls:
        #    client_key: client.key
        #    client_cert: client.crt
        #    ca_cert: ca.crt
        #    verify: false
        # optional explicit event map - by default the
        # forwarder will attempt to consume all* events
        # event_map: defines the messages to consume
        #event_map:
        #   event_category: 
        #         - specific_routing_keys
        #ex)  
        #...
        #event_map:
        #    events_watchlist:
        #        - watchlist.storage.hit.process
        #        - watchlist.storage.hit.binary
        #        - watchlist.hit.binary
        #        - watchlist.hit.binary
        # optional post processing for feedhits
        # has its own TLS section as above
        #post_processing:
        #    tls:
        #        tls_verify: false
        #    api_token: <CBRTOKEN>
        #    proxy_url: <proxyurl>

# The output stanza defines a list of outputs - each key'd from a type of output
# and providing an output destination, and format-type
# the old output_types:
# file,http,socket,splunk,http,syslog etc are still available and
# function very similarly to in 3.0

output:
    - file:
        path: "output-json.txt"
        format:
            type: json 
    - file:
        path: "output-leef.txt"
        format:
            type: leef

# these options are retained from prior versions
# they are applied to ALL in-flight messages
# if the key exists , it will be removed
# conversly the k-vs will be added to add messages
# users should use the template output options for more sophisticated
# levels of output control than allowed by these more granular settings

# optional: removeFromOutput - a list of keys to remove from the output
#removeFromOutput:
#    - key

#optional: addToOutput - a list of k-vs (a ditionary) to add to each element
#addToOutput:
#    key : value
#    key2 : value2

#

#the filter section is optional
#filter:
#    template: >-
#                {{if (eq .type "alert.watchlist.hit.query.binary") -}}
#                      KEEP
#                {{- else -}}
#                      DROP
#                {{- end}}
#
#
# The filter will be evaluated for each message and will KEEP or DROP (DEFAUlT)
# messages based on the evaluated string of the filter-template
# the templates are specified in golang's templating language
# the filters have optional plugins that can be used by advanced users to
# write a 'functionmap' from go/text/template that will be available
# the filter at runtime allowing customization

# The output stanza defines a list of outputs - each key'd from a type of output
# and providing an output destination, and format-type
# the old output_types:
# file,http,socket,splunk,http,syslog etc are still available and
# function very similarly to in 3.0
# merely being configured in YAML
# multiple outputs is a new feature, be gentle
# new templates for output formating
# you can specify a golang text/template to format the outgoing
# Carbon Black response message before it is processed by the output handler
# the 'template:' key provdes a go text-template that
# receives the CbR message as a map, with string keys and values
# corresponding to the cbr message like map[string] interface{}
# which can be manipulated fairly easily in the templating language provided by go
# use .Key to acces the value of Key
# - file:
#    path: "output-template.txt"
#    format:
#       type: template
#        template: {{YamlFormat .}}

#output plugins
# The 4.0 event forwarder features modular and customizable outputs
# called plugins
# these output plugins can be written by users in golang
# allowing the definition of new output-types necessitating upstream contributions
# the output plugins can do more or less anything a 'real output' type can do
# and can be used along side the usual output types from 3.x and prior

# plugins/output/kafka
# provides a new implentation of the kafka output as a plugin
# this .so is loaded at runtime by the forwarder
# to allow for output w/ kafka brokers
# the plugin uses go-confluent-kafka which relies on the librdkafka.so
# modular plugins allow the forwarder to support this great kafka library
# w/o tying down non-kafka use cases to requiring librdkafka.so
#
#
# general structure of plugin conf
#output:
#    - plugin:
#        path: path/to/the.so
#        plugin: nameoftheso
#        config:
#            ...config goes here if needed...
#
# the kafka plugin takes 3 arguments:
# producer:
#    bootstrap.servers: localhost:9092
# this feeds parameters to the underlying kafka-producer,exactly like x.y=v
# this is entirely optional, with reasonable defaults in place
# but users can feel free to customize the producer config to their linking
# the topic suffix parameter allows added a suffix to the produced topics
# which are otherwised set to the 'type' of the outgoing message
# topicSuffix: -mydesiredsuffix
# and is in general a great example of how to write your own output plugin for the event-forwarder
